group_by(months)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights %>%
group_by(month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights %>%
group_by(month)
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
dep_delay_by_month
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(avg_dep_delay = max(avg_dep_delay))
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(-avg_arr_delay)
# You can look up these airports in the `airports` data frame!
View(airports)
airports %>%
filter(faa = "CAE")
airports %>%
filter(faa = "CAE")
airports %>%
filter(faa == "CAE")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
View(flights)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_dest_arr_delays <- flights %>%
filter(dest) %>%
summarize(
avg_arr_delays = mean(arr_delay) , na.rm = TRUE
)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_dest_arr_delays <- flights %>%
filter(dest) %>%
summarize(
avg_arr_delays = mean(arr_delay) , rm.na = TRUE
)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_dest_arr_delays <- flights %>%
filter(dest) %>%
summarize(
avg_arr_delays = mean(arr_delay)
)
install.packages("httr")
library("httr")
base_uri <- "http://api.github.com"
endpoint <- "/search/repositories"
resource_uri <- paste0(base_uri, endpoint)
query_params <- list(q= "dplyr", sort = "forks")
response <- GET(resource_uri, query = query_params)
print(response)
response <- GET(resource_uri, query = query_params)
print(response)
print(response)
base_uri <- "http://api.github.com"
endpoint <- "/search/repositories"
resource_uri <- paste0(base_uri, endpoint)
query_params <- list(q = "dplyr", sort = "forks")
response <- GET(resource_uri, query = query_params)
print(response)
base_uri <- "http://api.github.com"
endpoint <- "/search/repositories"
resource_uri <- paste0(base_uri, endpoint)
query_params <- list(q = "dplyr", sort = "forks")
response <- GET(resource_uri, query = query_params)
print(response)
response <- GET(resource_uri, query = query_params)
library("httr")
base_uri <- "http://api.github.com"
endpoint <- "/search/repositories"
resource_uri <- paste0(base_uri, endpoint)
query_params <- list(q = "dplyr", sort = "forks")
response <- GET(resource_uri, query = query_params)
url <- "http://api.github.com/search/repositories?q=dplyr&sort=forks"
response1 <- GET(url)
url <- "http://api.github.com/search/repositories?q=dplyr&sort=forks"
response1 <- GET(url)
base_uri <- "http://api.github.com"
endpoint <- "/search/repositories"
resource_uri <- paste0(base_uri, endpoint)
query_params <- list(q = "dplyr", sort = "forks")
response2 <- GET(resource_uri, query = query_params)
print(response)
url <- "http://api.github.com/search/repositories?q=dplyr&sort=forks"
response1 <- GET(url)
install.packages("httr")
install.packages("httr")
library("httr")
url <- "http://api.github.com/search/repositories?q=dplyr&sort=forks"
response1 <- GET(url)
source("analysis.R")
source("analysis.R")
library("knitr")
library("kableExtra")
percent_decreased_hdi <- paste0(0 / num_countries) * 100, "%")
percent_decreased_hdi <- paste0(0 / num_countries) * 100, "%")
percent_decreased_hdi <- paste0((0 / num_countries) * 100, "%")
View(co2_decrease_and_hdi_df)
image <- include_graphics("data_sketches/julias_sketches.pdf")
setwd("~/info-201/assignments/info201-groupaa5-final-project")
co2_data <- read.csv("data/Carbon dioxide emissions per capita (tonnes).csv", stringsAsFactors = FALSE)
hdi_data <- read.csv("data/Human Development Index (HDI).csv", stringsAsFactors = FALSE)
hdi_data <- hdi_data[, colSums(is.na(hdi_data)) < nrow(hdi_data)] %>% #delete na values
rename(rank_2017 = HDI.Rank..2017.)
names(hdi_data)[3:30] <- gsub("X", "HDI_", names(hdi_data)[3:30]) #change colnames
co2_data <- co2_data[, colSums(is.na(co2_data)) < nrow(co2_data)] %>% #delete na values
rename(rank_2017 = HDI.Rank..2017.)
names(co2_data)[3:11] <- gsub("X", "co2_", names(co2_data)[3:11]) #change colnames
# Carbon dioxide emissions per capita and Human Development Index
# Data is from http://hdr.undp.org/en/data#
co2_data <- read.csv("data/Carbon dioxide emissions per capita (tonnes).csv", stringsAsFactors = FALSE)
hdi_data <- read.csv("data/Human Development Index (HDI).csv", stringsAsFactors = FALSE)
hdi_data <- hdi_data[, colSums(is.na(hdi_data)) < nrow(hdi_data)] %>% #delete na values
rename(rank_2017 = HDI.Rank..2017.)
names(hdi_data)[3:30] <- gsub("X", "HDI_", names(hdi_data)[3:30]) #change colnames
co2_data <- co2_data[, colSums(is.na(co2_data)) < nrow(co2_data)] %>% #delete na values
rename(rank_2017 = HDI.Rank..2017.)
names(co2_data)[3:11] <- gsub("X", "co2_", names(co2_data)[3:11]) #change colnames
co2_data <- read.csv("data/Carbon dioxide emissions per capita (tonnes).csv", stringsAsFactors = FALSE)
hdi_data <- read.csv("data/Human Development Index (HDI).csv", stringsAsFactors = FALSE)
hdi_data <- hdi_data[, colSums(is.na(hdi_data)) < nrow(hdi_data)] %>% #delete na values
rename(rank_2017 = HDI.Rank..2017.)
setwd("~/info-201/assignments/info201-groupaa5-final-project")
co2_data <- read.csv("data/Carbon dioxide emissions per capita (tonnes).csv", stringsAsFactors = FALSE)
hdi_data <- read.csv("data/Human Development Index (HDI).csv", stringsAsFactors = FALSE)
hdi_data <- hdi_data[, colSums(is.na(hdi_data)) < nrow(hdi_data)] %>% #delete na values
rename(rank_2017 = HDI.Rank..2017.)
xlibrary("dplyr")
library("dplyr")
library("tidyr")
co2_data <- read.csv("data/Carbon dioxide emissions per capita (tonnes).csv", stringsAsFactors = FALSE)
hdi_data <- read.csv("data/Human Development Index (HDI).csv", stringsAsFactors = FALSE)
hdi_data <- hdi_data[, colSums(is.na(hdi_data)) < nrow(hdi_data)] %>% #delete na values
rename(rank_2017 = HDI.Rank..2017.)
names(hdi_data)[3:30] <- gsub("X", "HDI_", names(hdi_data)[3:30]) #change colnames
co2_data <- co2_data[, colSums(is.na(co2_data)) < nrow(co2_data)] %>% #delete na values
rename(rank_2017 = HDI.Rank..2017.)
names(co2_data)[3:11] <- gsub("X", "co2_", names(co2_data)[3:11]) #change colnames
#Import the needed libraries
library("shiny")
#Create the main user interface using a fluidPage
main_ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table"),
tabPanel("1"),
tabPanel("2"),
tabPanel("3"),
tabPanel("4")
)
)
)
)
#Create the main user interface using a fluidPage
main_ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table"),
tabPanel("1"),
tabPanel("2"),
tabPanel("3"),
tabPanel("4")
)
)
)
)
#Import the needed libraries
library("shiny")
#Create the main user interface using a fluidPage
main_ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table"),
tabPanel("1"),
tabPanel("2"),
tabPanel("3"),
tabPanel("4")
)
)
)
)
#Import the needed libraries
library("shiny")
#Import the server and UI files
source("server.R")
source("ui.R")
#Launch the shiny app with the imported server and UI
shinyApp(ui = main_ui, server = main_server)
#Import the needed libraries
library("shiny")
library("dplyr")
source("data.R")
#Create the server
main_server <- function(input, output) {
}
s
#Launch the shiny app with the imported server and UI
shinyApp(ui = main_ui, server = main_server)
#Import the needed libraries
library("shiny")
#Import the server and UI files
source("server.R")
source("ui.R")
#Launch the shiny app with the imported server and UI
shinyApp(ui = main_ui, server = main_server)
#Import the needed libraries
library("shiny")
library("dplyr")
source("data.R")
#Create the server
main_server <- function(input, output) {
}
#Import the needed libraries
library("shiny")
#Create the main user interface using a fluidPage
main_ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table"),
tabPanel("1"),
tabPanel("2"),
tabPanel("3"),
tabPanel("4")
)
)
)
)
#Launch the shiny app with the imported server and UI
shinyApp(ui = main_ui, server = main_server)
#Import the needed libraries
library("shiny")
install.packages("shiny")
#Import the needed libraries
library("shiny")
#Import the server and UI files
source("server.R")
source("ui.R")
#Launch the shiny app with the imported server and UI
shinyApp(ui = main_ui, server = main_server)
#Create the main user interface using a fluidPage
main_ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table"),
tabPanel("1"),
tabPanel("2"),
tabPanel("3"),
tabPanel("4")
)
)
)
)
#Create the main user interface using a fluidPage
main_ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table"),
tabPanel("1"),
tabPanel("2"),
tabPanel("3"),
tabPanel("4")
)
)
)
)
hdi_1990_to_2014 <- hdi_data %>%
mutate(change_hdi = HDI_2014 - HDI_1990) %>%
select(Country, HDI_1990, HDI_2014, change_hdi)
co2_decrease_countries <- co2_data %>%
select(rank_2017, Country, co2_1990,co2_2014) %>%
filter(co2_2014 < co2_1990)
co2_decrease_and_hdi_df <- left_join(co2_decrease_countries, hdi_1990_to_2014, by = c("Country")) %>%
na.omit(co2_decrease_and_hdi_df$change_hdi)
num_countries <- nrow(co2_decrease_and_hdi_df)   # 34 -- with the NA vlaues it is 48
increased_hdi <- co2_decrease_and_hdi_df %>%
filter(change_hdi > 0) %>%
nrow()   # 34 -- all of the countries whose CO2 emissions decreased, their quality of life increased
increased_0.1_hdi <- co2_decrease_and_hdi_df %>%
filter(change_hdi <= 0.1) %>%
nrow()   # 11
percent_increased_hdi <- paste0((increased_hdi / num_countries) * 100, "%")   # 100%
percent_increased_0.1_hdi <- paste0(round((increased_0.1_hdi / num_countries) * 100, digits = 2 ), "%")
percent_decreased_hdi <- paste0((0 / num_countries) * 100, "%")
View(co2_decrease_countries)
runApp()
#Import the needed libraries
library("shiny")
library("dplyr")
source("data.R")
#Create the server
main_server <- function(input, output) {
output$kaylaHDIMap <- renderPlot({
plot_data <- world_HDI
#widget code here
# Map visualization
ggplot(data = plot_data) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = hdi_data),
color = "white",
size = .1
) +
coord_map() +
labs(
title = "HDI Levels",
fill = "Values"
)
})
output$kaylaCO2Map <- renderPlot({
plot_data <- world_CO2
#widget code here
# Map visualization
ggplot(data = plot_data) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = co2_data),
color = "white",
size = .1
) +
coord_map() +
labs(
title = "CO2 Levels",
fill = "Values"
)
})
}
library("dplyr")
library("tidyr")
library("maps")
library("mapproj")
library("ggplot2")
# Carbon dioxide emissions per capita and Human Development Index
# Data is from http://hdr.undp.org/en/data#
co2_data <- read.csv("data/Carbon dioxide emissions per capita (tonnes).csv", stringsAsFactors = FALSE)
hdi_data <- read.csv("data/Human Development Index (HDI).csv", stringsAsFactors = FALSE)
hdi_data <- hdi_data[, colSums(is.na(hdi_data)) < nrow(hdi_data)] %>% #delete na values
rename(rank_2017 = HDI.Rank..2017.)
names(hdi_data)[3:30] <- gsub("X", "HDI_", names(hdi_data)[3:30]) #change colnames
co2_data <- co2_data[, colSums(is.na(co2_data)) < nrow(co2_data)] %>% #delete na values
rename(rank_2017 = HDI.Rank..2017.)
names(co2_data)[3:11] <- gsub("X", "co2_", names(co2_data)[3:11]) #change colnames
# range of years
colnames <- colnames(hdi_data)
colnames <- colnames[3:27]
years <- as.character(substr(colnames, 5, nchar(colnames)))
# DILLON
# KAYLA
#plot data for HDI
plot_HDI_data <- hdi_data %>%
gather(
key = Year,
value = hdi_data,
HDI_1990:HDI_2017
) %>%
mutate(
Year = as.numeric((substr(Year, nchar(Year) - 3, nchar(Year))))
)
plot_HDI_data$rank_2017 <- NULL
#plot data for CO2
plot_CO2_data <- co2_data %>%
gather(
key = Year,
value = co2_data,
co2_1990:co2_2014
) %>%
mutate(
Year = as.numeric((substr(Year, nchar(Year) - 3, nchar(Year))))
)
plot_CO2_data$rank_2017 <- NULL
# World map data to visualize
world <- map_data("world")
world_HDI <- world %>%
rename(Country = region) %>%
full_join(plot_HDI_data, by = "Country")
world_CO2 <- world %>%
rename(Country = region) %>%
full_join(plot_CO2_data, by = "Country")
# ARAMIS
# JULIA
# Data frames and variables to help answer critical question 4 about the percentage of
# countries whose HDI increased or decreased while their CO2 emissions levels decreased
# Data frame of all countries change in HDI from 1990 to 2014
hdi_1990_to_2014 <- hdi_data %>%
mutate(change_hdi = HDI_2014 - HDI_1990) %>%
select(Country, HDI_1990, HDI_2014, change_hdi)
# Data frame of all the countries whose CO2 emmisions per capita DECREASED from 1990 to 2014
co2_decrease_countries <- co2_data %>%
select(rank_2017, Country, co2_1990,co2_2014) %>%
filter(co2_2014 < co2_1990)
# Joins the two data frames together - excluding the NA values
co2_decrease_and_hdi_df <- left_join(co2_decrease_countries, hdi_1990_to_2014, by = c("Country")) %>%
na.omit(co2_decrease_and_hdi_df$change_hdi)
# Number of countries whose CO2 emissions per capita decreased
num_countries <- nrow(co2_decrease_and_hdi_df)   # 34 -- with the NA vlaues it is 48
# Number of countries whose HDI increased as their CO2 emissions decreased
increased_hdi <- co2_decrease_and_hdi_df %>%
filter(change_hdi > 0) %>%
nrow()   # 34 -- all of the countries whose CO2 emissions decreased, their quality of life increased
# Number of countries whose HDI decreased as their CO2 emissions decreased
increased_0.1_hdi <- co2_decrease_and_hdi_df %>%
filter(change_hdi <= 0.1) %>%
nrow()   # 11
# Percentage of countries whose HDI increased as their CO2 emissions decreased
percent_increased_hdi <- paste0((increased_hdi / num_countries) * 100, "%")   # 100%
# Percentage of countries whose HDI increased above 0.1 as their CO2 emissions decreased
percent_increased_0.1_hdi <- paste0(round((increased_0.1_hdi / num_countries) * 100, digits = 2 ), "%")
# Percentage of countries whose HDI decreased as their CO2 emissions decreased
percent_decreased_hdi <- paste0((0 / num_countries) * 100, "%")
#Create the main user interface using a fluidPage
main_ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
# drop down for years
selectInput(
inputId = "years",
label = "Select Year:",
choices = c(years, "Select year..."),
selected = "Select year..."
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Summary"),
tabPanel("Table"),
tabPanel("1"),
tabPanel("Kayla", plotOutput("kaylaCO2Map"), plotOutput("kaylaHDIMap")),
tabPanel("3"),
tabPanel("4")
)
)
)
)
#Import the needed libraries
library("shiny")
#Import the server and UI files
source("server.R")
source("ui.R")
#Launch the shiny app with the imported server and UI
shinyApp(ui = main_ui, server = main_server)
runApp()
runApp()
